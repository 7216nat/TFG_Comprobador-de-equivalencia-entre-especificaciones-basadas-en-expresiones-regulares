
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 29 13:22:50 CEST 2021
//----------------------------------------------------

package analizador.sintactico;

import java_cup.runtime.*;
import analizador.lexico.AnalizadorLexico;
import analizador.lexico.UnidadLexica;
import analizador.errores.ErrorAnalizador;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 29 13:22:50 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\006\000\002\007\004\000" +
    "\002\010\005\000\002\010\002\000\002\020\004\000\002" +
    "\021\004\000\002\021\002\000\002\011\004\000\002\012" +
    "\004\000\002\012\002\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\ufffe\004\007\007\ufffe\001\002\000" +
    "\006\002\ufffb\007\054\001\002\000\004\002\052\001\002" +
    "\000\010\002\ufffe\004\007\007\ufffe\001\002\000\004\006" +
    "\010\001\002\000\004\005\011\001\002\000\014\006\016" +
    "\014\013\016\012\021\015\022\014\001\002\000\010\006" +
    "\016\021\015\022\014\001\002\000\014\006\016\014\013" +
    "\016\012\021\015\022\014\001\002\000\040\002\uffe6\004" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\001\002\000\040\002\uffe7\004\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\001\002\000\040" +
    "\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\001\002\000\034\002\uffea\004\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\021\uffea\022\uffea\001\002\000\034\002" +
    "\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\021\uffec\022\uffec\001" +
    "\002\000\014\002\ufff7\004\ufff7\007\ufff7\010\036\015\ufff7" +
    "\001\002\000\034\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\030\012\031\013\033\014\ufff1\015\ufff1\016\ufff1" +
    "\021\ufff1\022\ufff1\001\002\000\026\002\ufff4\004\ufff4\006" +
    "\016\007\ufff4\010\ufff4\014\013\015\ufff4\016\012\021\015" +
    "\022\014\001\002\000\010\002\ufffd\004\ufffd\007\ufffd\001" +
    "\002\000\014\002\ufff6\004\ufff6\007\ufff6\010\ufff6\015\ufff6" +
    "\001\002\000\026\002\ufff4\004\ufff4\006\016\007\ufff4\010" +
    "\ufff4\014\013\015\ufff4\016\012\021\015\022\014\001\002" +
    "\000\014\002\ufff5\004\ufff5\007\ufff5\010\ufff5\015\ufff5\001" +
    "\002\000\034\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\021" +
    "\ufff0\022\ufff0\001\002\000\034\002\uffef\004\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\021\uffef\022\uffef\001\002\000\026\002\ufff3" +
    "\004\ufff3\006\ufff3\007\ufff3\010\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\021\ufff3\022\ufff3\001\002\000\034\002\uffee\004\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\021\uffee\022\uffee\001\002\000\034" +
    "\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\030\012" +
    "\031\013\033\014\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1" +
    "\001\002\000\026\002\ufff2\004\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\001\002" +
    "\000\014\006\016\014\013\016\012\021\015\022\014\001" +
    "\002\000\012\002\ufff9\004\ufff9\007\ufff9\015\ufff9\001\002" +
    "\000\014\002\ufff7\004\ufff7\007\ufff7\010\036\015\ufff7\001" +
    "\002\000\012\002\ufff8\004\ufff8\007\ufff8\015\ufff8\001\002" +
    "\000\004\015\043\001\002\000\034\002\uffed\004\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\021\uffed\022\uffed\001\002\000\006\017" +
    "\uffe8\020\047\001\002\000\004\017\046\001\002\000\034" +
    "\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb" +
    "\001\002\000\010\006\016\021\015\022\014\001\002\000" +
    "\004\017\uffe9\001\002\000\006\002\uffff\007\uffff\001\002" +
    "\000\004\002\000\001\002\000\006\002\ufffb\007\054\001" +
    "\002\000\004\006\056\001\002\000\004\002\001\001\002" +
    "\000\004\005\057\001\002\000\014\006\016\014\013\016" +
    "\012\021\015\022\014\001\002\000\006\002\ufffa\007\ufffa" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\004\003\003\004\005\001\001\000" +
    "\006\005\054\006\052\001\001\000\002\001\001\000\006" +
    "\003\050\004\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\023\011\022\014\021\015\017\017\016" +
    "\020\020\001\001\000\006\016\044\017\043\001\001\000" +
    "\016\007\041\011\022\014\021\015\017\017\016\020\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\036" +
    "\001\001\000\006\012\031\013\033\001\001\000\014\011" +
    "\025\014\021\015\017\017\016\021\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\025\014\021\015" +
    "\017\017\016\021\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\034\013\033\001\001\000\002\001\001" +
    "\000\014\011\022\014\021\015\017\017\016\020\037\001" +
    "\001\000\002\001\001\000\004\010\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\060\006\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\057\011" +
    "\022\014\021\015\017\017\016\020\020\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new ErrorAnalizador();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private ErrorAnalizador errores;
   public void syntax_error(Symbol unidadLexica){
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Pre ::= Auxs Defs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Pre",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Pre EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Auxs ::= Aux Auxs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Auxs",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Auxs ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Auxs",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Aux ::= AUX VAR IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Aux",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Defs ::= Def Defs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Defs",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Defs ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Defs",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Def ::= DEF VAR IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Def",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E0 ::= E12 RestE0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RestE0 ::= ALTER E12 RestE0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RestE0",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RestE0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RestE0",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E12 ::= E1 RestE12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E12",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RestE12 ::= E1 RestE12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RestE12",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RestE12 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RestE12",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E1 ::= E2 RestE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RestE1 ::= op1A RestE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RestE1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RestE1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RestE1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op1A ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("op1A",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op1A ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("op1A",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op1A ::= INTERR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("op1A",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E2 ::= PAP E0 PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E3 ::= CORAP E4 CORCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E3 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E4 ::= E5 GUION E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E5 ::= ESCAPESIM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E5 ::= SIM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E5 ::= VAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

