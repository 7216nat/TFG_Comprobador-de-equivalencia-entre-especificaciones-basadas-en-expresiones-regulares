
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 29 22:01:20 CEST 2021
//----------------------------------------------------

package analizador.sintactico;

import java_cup.runtime.*;
import analizador.lexico.AnalizadorLexico;
import analizador.lexico.UnidadLexica;
import java.util.List;
import java.util.ArrayList;
import analizador.errores.ErrorAnalizador;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 29 22:01:20 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\006\000\002\006\003\000\002\006\002\000" +
    "\002\007\005\000\002\007\003\000\002\010\006\000\002" +
    "\011\005\000\002\011\003\000\002\012\004\000\002\012" +
    "\003\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\010\002\ufffe\004\010\006\ufffe\001\002\000" +
    "\010\002\uffff\006\uffff\022\056\001\002\000\004\002\055" +
    "\001\002\000\006\002\ufff9\006\046\001\002\000\010\002" +
    "\ufffc\006\ufffc\022\ufffc\001\002\000\004\024\011\001\002" +
    "\000\004\005\012\001\002\000\014\014\013\016\014\020" +
    "\016\023\015\024\017\001\002\000\014\014\013\016\014" +
    "\020\016\023\015\024\017\001\002\000\004\023\032\001" +
    "\002\000\034\002\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\014\uffed\015\uffed\016\uffed\020\uffed\022\uffed\023" +
    "\uffed\024\uffed\001\002\000\034\002\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002\000\034\002\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\015" +
    "\uffec\016\uffec\020\uffec\022\uffec\023\uffec\024\uffec\001\002" +
    "\000\034\002\uffee\006\uffee\007\uffee\010\027\011\030\012" +
    "\031\014\uffee\015\uffee\016\uffee\020\uffee\022\uffee\023\uffee" +
    "\024\uffee\001\002\000\026\002\ufff2\006\ufff2\007\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\001\002\000\026\002\ufff4\006\ufff4\007\ufff4\014\013\015" +
    "\ufff4\016\014\020\016\022\ufff4\023\015\024\017\001\002" +
    "\000\012\002\ufffb\006\ufffb\007\024\022\ufffb\001\002\000" +
    "\014\014\013\016\014\020\016\023\015\024\017\001\002" +
    "\000\026\002\ufff5\006\ufff5\007\ufff5\014\013\015\ufff5\016" +
    "\014\020\016\022\ufff5\023\015\024\017\001\002\000\026" +
    "\002\ufff3\006\ufff3\007\ufff3\014\ufff3\015\ufff3\016\ufff3\020" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\001\002\000\026\002\ufff1" +
    "\006\ufff1\007\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\001\002\000\026\002\ufff0\006\ufff0" +
    "\007\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\001\002\000\026\002\uffef\006\uffef\007\uffef" +
    "\014\uffef\015\uffef\016\uffef\020\uffef\022\uffef\023\uffef\024" +
    "\uffef\001\002\000\004\013\040\001\002\000\006\017\uffe7" +
    "\021\uffe7\001\002\000\006\017\036\021\035\001\002\000" +
    "\004\023\032\001\002\000\034\002\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\020" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\001\002\000\006\017\uffe8" +
    "\021\uffe8\001\002\000\004\023\041\001\002\000\006\017" +
    "\uffe6\021\uffe6\001\002\000\006\007\024\015\043\001\002" +
    "\000\034\002\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\022\uffea\023\uffea" +
    "\024\uffea\001\002\000\004\002\001\001\002\000\006\002" +
    "\ufff7\022\ufff7\001\002\000\004\024\052\001\002\000\006" +
    "\002\ufffa\022\050\001\002\000\004\006\046\001\002\000" +
    "\006\002\ufff8\022\ufff8\001\002\000\004\005\053\001\002" +
    "\000\014\014\013\016\014\020\016\023\015\024\017\001" +
    "\002\000\010\002\ufff6\007\024\022\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\004\010\001\002\000\010\002" +
    "\ufffd\006\ufffd\022\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\012\002\004\003\005\004\003\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\043" +
    "\007\046\010\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\022\012\021\013\020" +
    "\014\017\001\001\000\012\011\041\012\021\013\020\014" +
    "\017\001\001\000\006\015\033\016\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\025\014\017\001\001" +
    "\000\002\001\001\000\010\012\024\013\020\014\017\001" +
    "\001\000\006\013\025\014\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\053\012\021\013" +
    "\020\014\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\056\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new ErrorAnalizador();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private ErrorAnalizador errores;
   private List<String> alist = new ArrayList<String>();
   public List<String> getList(){
   	 return alist;
   }
   public void syntax_error(Symbol unidadLexica){
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


   private boolean mapPerm = true;
   public void setPerm(boolean bool){
   		mapPerm = false;
   }
   public boolean getPerm(){
   		return mapPerm;
   }
   public void write(String msg){
   		System.out.println("Nodo: " + msg);
   }

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Pre ::= LAuxs LDefs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Pre",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Pre EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LAuxs ::= Auxs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LAuxs",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LAuxs ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LAuxs",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Auxs ::= Auxs PUNTOCOMA Aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Auxs",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Auxs ::= Aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Auxs",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Aux ::= AUX VAR IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Aux",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LDefs ::= Defs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LDefs",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LDefs ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LDefs",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Defs ::= Defs PUNTOCOMA Def 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Defs",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Defs ::= Def 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Defs",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Def ::= DEF VAR IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0 ::= E0 ALTER E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E1 ::= E1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E2 ::= E3 ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E2 ::= E3 MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E2 ::= E3 INTERR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E3 ::= SIM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E3 ::= VAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E3 ::= ESCAPESIM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E3 ::= PAP E0 PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E3 ::= CORAP Rangos CORCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Rangos ::= Rangos COMA Rango 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rangos",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Rangos ::= Rango 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rangos",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Rango ::= SIM GUION SIM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rango",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

