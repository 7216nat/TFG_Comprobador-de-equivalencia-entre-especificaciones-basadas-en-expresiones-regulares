package analizador.sintactico;

import java_cup.runtime.*;
import analizador.lexico.AnalizadorLexico;
import analizador.lexico.UnidadLexica;
import java.util.List;
import java.util.ArrayList;
import analizador.errores.ErrorAnalizador;

scan with {: return getScanner().next_token(); :};
action code{:
   private boolean mapPerm = true;
   public void setPerm(boolean bool){
   		mapPerm = false;
   }
   public boolean getPerm(){
   		return mapPerm;
   }
   public void write(String msg){
   		System.out.println("Nodo: " + msg);
   }
:}
parser code {: 
   private ErrorAnalizador errores;
   private List<String> alist = new ArrayList<String>();
   public List<String> getList(){
   	 return alist;
   }
   public void syntax_error(Symbol unidadLexica){
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new ErrorAnalizador();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal        AUX, IGUAL, DEF, ALTER, ASTERISCO, MAS, INTERR, GUION,
                PAP, PCIE, CORAP, CORCIE, ESCAPESIM, COMA, PUNTOCOMA,
				SIM, VAR;
non terminal    Pre, LAuxs, Auxs, Aux, LDefs, Defs, Def, E0, E1, 
                E2, E3, Rangos, Rango;
                

Pre ::= LAuxs LDefs ;
LAuxs ::= Auxs | ;
Auxs ::= Auxs PUNTOCOMA Aux | Aux;
Aux ::= AUX VAR IGUAL E0 ;
LDefs ::= Defs | ;
Defs ::= Defs PUNTOCOMA Def | Def;
Def ::= DEF VAR IGUAL E0 ;

E0 ::= E0 ALTER E1 | E1;
E1 ::= E1 E2 | E2;
E2 ::= E3 ASTERISCO | E3 MAS | E3 INTERR | E3;
E3 ::= SIM | VAR | ESCAPESIM | PAP E0 PCIE | CORAP Rangos CORCIE;

Rangos ::= Rangos COMA Rango | Rango;
Rango ::= SIM GUION SIM ;